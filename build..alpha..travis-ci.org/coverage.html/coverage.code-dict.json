{"/home/travis/build/npmtest/node-npmtest-jsxstyle/test.js":"/* istanbul instrument in package npmtest_jsxstyle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/lib.npmtest_jsxstyle.js":"/* istanbul instrument in package npmtest_jsxstyle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jsxstyle = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jsxstyle = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jsxstyle && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jsxstyle */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jsxstyle\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jsxstyle.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jsxstyle.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jsxstyle.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jsxstyle.__dirname + '/lib.npmtest_jsxstyle.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/index.js":"'use strict';\n\nvar Addons = require('./lib/Addons');\nvar Color = require('./lib/Color');\nvar Display = require('./lib/Display');\nvar GlobalStylesheets = require('./lib/GlobalStylesheets');\n\nvar assign = require('object-assign');\nvar createCSS = require('./lib/createCSS');\nvar curry = require('./curry');\nvar invariant = require('invariant');\n\nvar index = assign({\n  curry: curry,\n  install: GlobalStylesheets.install,\n  injectAutoprefixer: function(autoprefix) {\n    invariant(typeof autoprefix === 'function', 'You may only inject functions for autoprefix');\n    createCSS.injection.autoprefix = autoprefix;\n  },\n  injectClassNameStrategy: function(getStylesheetId, formatClassNameFromId) {\n    if (getStylesheetId) {\n      invariant(typeof getStylesheetId === 'function', 'getStylesheetId must be a function');\n      GlobalStylesheets.injection.getStylesheetId = getStylesheetId;\n    }\n\n    if (formatClassNameFromId) {\n      invariant(typeof formatClassNameFromId === 'function', 'formatClassNameFromId must be a function');\n      GlobalStylesheets.injection.formatClassNameFromId = formatClassNameFromId;\n    }\n  },\n}, Color, Display, Addons);\n\nmodule.exports = index;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/Addons.js":"'use strict';\n\nvar Flex = require('../Flex');\n\nvar curry = require('../curry');\n\nvar Addons = {\n  Row: curry(Flex, { flexDirection: 'row' }),\n  Col: curry(Flex, { flexDirection: 'column' })\n};\n\nAddons.Row.displayName = 'Row';\nAddons.Col.displayName = 'Col';\n\nmodule.exports = Addons;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/Flex.js":"module.exports = require('./lib/Display').Flex;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/Display.js":"'use strict';\n\nvar CSSDisplayNames = require('./CSSDisplayNames');\nvar makeStyleComponentClass = require('./makeStyleComponentClass');\n\nvar Display = {};\n\nfor (var name in CSSDisplayNames) {\n  var display = CSSDisplayNames[name];\n  Display[name] = makeStyleComponentClass({ display: display }, name);\n}\n\nmodule.exports = Display;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/CSSDisplayNames.js":"'use strict';\n\nvar CSSDisplayNames = {\n  Block: 'block',\n  Flex: 'flex',\n  InlineBlock: 'inline-block',\n  InlineFlex: 'inline-flex',\n  Table: 'table',\n  TableRow: 'table-row',\n  TableCell: 'table-cell',\n  Inline: 'inline'\n};\n\nmodule.exports = CSSDisplayNames;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/makeStyleComponentClass.js":"'use strict';\n\nvar GlobalStylesheets = require('./GlobalStylesheets');\nvar React = require('react');\n\nvar assign = require('object-assign');\n\nfunction getStyleFromProps(props) {\n  var style = {};\n\n  for (var key in props) {\n    if (key === 'children' || key === 'className' || key === 'component' || key === 'props' || key === 'style') {\n      continue;\n    }\n    style[key] = props[key];\n  }\n\n  return style;\n}\n\nfunction makeStyleComponentClass(defaults, displayName, tagName) {\n  tagName = tagName || 'div';\n  displayName = displayName || 'Style';\n\n  var Style = React.createClass({\n    displayName: displayName,\n\n    statics: {\n      style: defaults\n    },\n\n    getDefaultProps: function getDefaultProps() {\n      return defaults;\n    },\n\n    refStyleKey: function refStyleKey(props) {\n      this.component = this.props.component || tagName;\n      this.styleKey = GlobalStylesheets.getKey(getStyleFromProps(props), displayName, this.component);\n      if (this.styleKey) {\n        GlobalStylesheets.ref(this.styleKey);\n      }\n    },\n\n    componentWillMount: function componentWillMount() {\n      this.refStyleKey(this.props);\n    },\n\n    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n      if (this.styleKey) {\n        GlobalStylesheets.unref(this.styleKey);\n      }\n      this.refStyleKey(nextProps);\n    },\n\n    componentWillUnmount: function componentWillUnmount() {\n      if (this.styleKey) {\n        GlobalStylesheets.unref(this.styleKey);\n      }\n    },\n\n    render: function render() {\n      var style = getStyleFromProps(this.props);\n      var className = this.styleKey ? GlobalStylesheets.getClassName(this.styleKey) : null;\n\n      return React.createElement(this.component, assign({}, this.props.props, {\n        className: className || this.props.className ? (this.props.className || '') + ' ' + (className || '') : null,\n        children: this.props.children,\n        style: this.props.style\n      }));\n    }\n  });\n\n  return Style;\n}\n\nmodule.exports = makeStyleComponentClass;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/GlobalStylesheets.js":"'use strict';\n\nvar explodePseudoStyles = require('./explodePseudoStyles');\nvar createCSS = require('./createCSS');\n\nvar assign = require('object-assign');\nvar invariant = require('invariant');\n\nvar PREFIX = 'jsxstyle';\n\nvar stylesheetIdSeed = 0;\n\nvar styles = {};\n\nvar browser = typeof document !== 'undefined';\n\nfunction addStyle(css) {\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n\n  style.type = 'text/css';\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n\n  head.appendChild(style);\n\n  return style;\n}\n\nfunction createStylesheet(stylesheet) {\n  var styles = explodePseudoStyles(assign({}, stylesheet.style));\n  var className = PREFIX + stylesheet.id;\n  var stylesheetText = [createCSS(styles.base, className, null), createCSS(styles.hover, className, null, ':hover'), createCSS(styles.active, className, null, ':active'), createCSS(styles.focus, className, null, ':focus')].join('');\n\n  return addStyle(stylesheetText);\n}\n\nfunction reap() {\n  for (var key in styles) {\n    if (styles[key].refs === 0) {\n      if (styles[key].domNode) {\n        removeNode(styles[key].domNode);\n      }\n      delete styles[key];\n    }\n  }\n}\n\nfunction removeNode(node) {\n  if (node && node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n}\n\nvar GlobalStylesheets = {\n  install: function install() {\n    if (browser) {\n      setInterval(reap, 10000);\n    }\n  },\n\n  getKey: function getKey(styleObj, displayName, component) {\n    var pairs = [];\n\n    Object.keys(styleObj).sort().forEach(function (key) {\n      var value = styleObj[key];\n\n      if (!value) {\n        return;\n      }\n\n      if (typeof value !== 'string' && typeof value !== 'number' && value != null) {\n        value = value.toString();\n      }\n      pairs.push(key + ':' + value);\n    });\n\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    var key = pairs.join(',');\n\n    if (!styles.hasOwnProperty(key)) {\n      var stylesheet = {\n        id: GlobalStylesheets.injection.getStylesheetId(key),\n        style: styleObj,\n        refs: 0\n      };\n      if (browser) {\n        stylesheet.domNode = createStylesheet(stylesheet);\n        document.head.appendChild(stylesheet.domNode);\n      }\n      styles[key] = stylesheet;\n    }\n\n    return key;\n  },\n\n  ref: function ref(key) {\n    styles[key].refs++;\n  },\n\n  unref: function unref(key) {\n    --styles[key].refs;\n  },\n\n  getClassName: function getClassName(styleKey) {\n    return GlobalStylesheets.injection.formatClassNameFromId(styles[styleKey].id);\n  },\n\n\n  injection: {\n    getStylesheetId: function getStylesheetId(styleKey, displayName, component) {\n      return stylesheetIdSeed++;\n    },\n    formatClassNameFromId: function formatClassNameFromId(id) {\n      return PREFIX + id;\n    }\n  }\n};\n\nmodule.exports = GlobalStylesheets;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/explodePseudoStyles.js":"'use strict';\n\nfunction stripPrefixFromStyleProp(styleProp, prefix) {\n  var formattedProp = styleProp.substr(prefix.length);\n  if (formattedProp.indexOf('Webkit') === 0 || formattedProp.indexOf('Moz') === 0) {\n    return formattedProp;\n  }\n  return formattedProp.charAt(0).toLowerCase() + formattedProp.slice(1);\n}\n\nfunction explodePseudoStyles(style) {\n  var styleObject = {};\n\n  for (var name in style) {\n    if (style.hasOwnProperty(name)) {\n      var prefix = 'base';\n      var styleProp = name;\n\n      if (name.indexOf('hover') === 0) {\n        prefix = 'hover';\n      } else if (name.indexOf('focus') === 0) {\n        prefix = 'focus';\n      } else if (name.indexOf('active') === 0) {\n        prefix = 'active';\n      }\n\n      if (prefix !== 'base') {\n        styleProp = stripPrefixFromStyleProp(styleProp, prefix);\n      }\n\n      styleObject[prefix] = styleObject[prefix] || {};\n      styleObject[prefix][styleProp] = style[name];\n    }\n  }\n\n  return styleObject;\n}\n\nmodule.exports = explodePseudoStyles;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/createCSS.js":"'use strict';\n\nvar CSSPropertyOperations = require('react-css-property-operations');\n\nfunction createCSS(styles, className, comment, pseudoSelector) {\n  if (!styles) {\n    return null;\n  }\n  var cssMarkup = CSSPropertyOperations.createMarkupForStyles(createCSS.injection.autoprefix(styles));\n\n  if (!cssMarkup) {\n    return null;\n  }\n\n  pseudoSelector = pseudoSelector || '';\n  comment = comment || '';\n\n  return '.' + className + pseudoSelector + ' {\\n' + '  ' + comment + cssMarkup + '\\n}\\n\\n';\n}\n\ncreateCSS.injection = {\n  autoprefix: function autoprefix(styles) {\n    return styles;\n  }\n};\n\nmodule.exports = createCSS;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/curry.js":"'use strict';\n\nvar React = require('react');\n\nvar assign = require('object-assign');\n\nfunction curry(componentClass) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  args.unshift({});\n  var props = assign.apply(null, args);\n\n  var propTypes = assign({}, componentClass.propTypes);\n  for (var key in props) {\n    delete propTypes[key];\n  }\n\n  return React.createClass({\n    displayName: componentClass.displayName + ' (curried)',\n    propTypes: propTypes,\n    render: function() {\n      return React.createElement(componentClass, assign({}, props, this.props));\n    },\n  });\n}\n\nmodule.exports = curry;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/Color.js":"'use strict';\n\nvar assign = require('object-assign');\nvar invariant = require('invariant');\n\nfunction RGBA(r, g, b, a) {\n  this.r = r;\n  this.g = g;\n  this.b = b;\n  this.a = a;\n}\n\nassign(RGBA.prototype, {\n  toString: function toString() {\n    var params = Math.round(this.r) + ', ' + Math.round(this.g) + ', ' + Math.round(this.b);\n    if (typeof this.a === 'undefined') {\n      return 'rgb(' + params + ')';\n    }\n    return 'rgba(' + params + ',' + this.a + ')';\n  }\n});\n\nvar Color = {\n  rgb: function rgb(r, g, b) {\n    invariant(arguments.length === 3, 'rgb() takes only 3 arguments');\n    return new RGBA(r, g, b);\n  },\n\n  rgba: function rgba(r, g, b, a) {\n    return new RGBA(r, g, b, a);\n  },\n\n  alpha: function alpha(rgba, a) {\n    return new RGBA(rgba.r, rgba.g, rgba.b, a);\n  },\n\n  shade: function shade(rgba, percent) {\n    invariant(typeof percent === 'number' && percent >= 0 && percent <= 1, 'Percent must be between 0 and 1');\n    return new RGBA(rgba.r * percent, rgba.g * percent, rgba.b * percent, rgba.a);\n  },\n\n  linearGradient: function linearGradient(direction, points) {\n    invariant(typeof direction === 'string', 'You must include a direction string');\n    invariant(Array.isArray(points), 'points must be an array of arrays');\n    return 'linear-gradient(' + direction + ', ' + points.map(function (point) {\n      return point.join(' ');\n    }).join(', ') + ')';\n  }\n};\n\nmodule.exports = Color;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/Block.js":"module.exports = require('./lib/Display').Block;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/Col.js":"module.exports = require('./lib/Addons').Col;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/.eslintrc.js":"module.exports = {\n  extends: 'eslint:recommended',\n  env: {\n    browser: true,\n    node: true,\n  },\n  rules: {\n    'comma-dangle': [2, 'always-multiline'],\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/InlineBlock.js":"module.exports = require('./lib/Display').InlineBlock;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/InlineFlex.js":"module.exports = require('./lib/Display').InlineFlex;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/Inline.js":"module.exports = require('./lib/Display').Inline;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/Row.js":"module.exports = require('./lib/Addons').Row;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/TableCell.js":"module.exports = require('./lib/Display').TableCell;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/Table.js":"module.exports = require('./lib/Display').Table;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/TableRow.js":"module.exports = require('./lib/Display').TableRow;\n","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/extractStyles.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar CSSDisplayNames = require('./CSSDisplayNames');\nvar explodePseudoStyles = require('./explodePseudoStyles');\nvar createCSS = require('./createCSS');\n\nvar assign = require('object-assign');\nvar vm = require('vm');\nvar invariant = require('invariant');\nvar recast = require('recast');\nvar types = recast.types;\nvar n = types.namedTypes;\nvar b = types.builders;\n\nfunction canEvaluate(staticNamespace, exprNode) {\n  if (n.Literal.check(exprNode)) {\n    return true;\n  } else if (n.JSXExpressionContainer.check(exprNode)) {\n    return canEvaluate(staticNamespace, exprNode.expression);\n  } else if (n.Identifier.check(exprNode) && staticNamespace.hasOwnProperty(exprNode.name)) {\n    return true;\n  } else if (n.MemberExpression.check(exprNode)) {\n    return n.Identifier.check(exprNode.property) && canEvaluate(staticNamespace, exprNode.object);\n  } else if (n.BinaryExpression.check(exprNode)) {\n    return canEvaluate(staticNamespace, exprNode.left) && canEvaluate(staticNamespace, exprNode.right);\n  }\n  return false;\n}\n\nfunction getDefaultGetClassNameAndComment() {\n  var i = 0;\n  return function (node) {\n    return {\n      className: '__s_' + i++,\n      comment: null\n    };\n  };\n}\n\nfunction extractStyles(src, staticNamespace, getClassNameAndComment) {\n  invariant(typeof src === 'string', 'You must pass a string src');\n\n  getClassNameAndComment = getClassNameAndComment || getDefaultGetClassNameAndComment();\n  staticNamespace = staticNamespace || {};\n\n  invariant(typeof getClassNameAndComment === 'function', 'getClassNameAndComment must be a function');\n  invariant((typeof staticNamespace === 'undefined' ? 'undefined' : _typeof(staticNamespace)) === 'object', 'staticNamespace must be an object');\n\n  var evalContext = vm.createContext(assign({}, staticNamespace));\n  function evaluate(exprNode) {\n    return vm.runInContext(recast.print(exprNode).code, evalContext);\n  }\n\n  var ast = recast.parse(src);\n  var staticStyles = [];\n\n  function transformOpeningElement(node) {\n    if (CSSDisplayNames.hasOwnProperty(node.name.name)) {\n      // Transform to div with a style attribute.\n      var staticAttributes = {};\n\n      node.attributes = node.attributes.filter(function (attribute) {\n        var name = attribute.name.name;\n        var value = attribute.value;\n\n        if (canEvaluate(staticNamespace, value)) {\n          staticAttributes[name] = evaluate(value);\n          return false;\n        }\n\n        return true;\n      });\n\n      node.attributes.push(b.jsxAttribute(b.jsxIdentifier('display'), b.jsxExpressionContainer(b.identifier('null'))));\n\n      staticAttributes.display = staticAttributes.display || CSSDisplayNames[node.name.name];\n\n      staticStyles.push({\n        node: node,\n        staticAttributes: staticAttributes\n      });\n    }\n\n    return node.name.name;\n  }\n\n  recast.visit(ast, {\n    visitJSXElement: function visitJSXElement(path) {\n      var elementName = transformOpeningElement(path.node.openingElement);\n      if (path.node.closingElement) {\n        path.node.closingElement.name.name = elementName;\n      }\n      this.traverse(path);\n    }\n  });\n\n  var css = '';\n\n  staticStyles.forEach(function (entry) {\n    var classNameAndComment = getClassNameAndComment(entry);\n    var className = classNameAndComment.className;\n    invariant(typeof className === 'string', 'className must be a string');\n\n    // TODO: is this a bug? does it overwrite className or generate bad code?\n    entry.node.attributes.push(b.jsxAttribute(b.jsxIdentifier('className'), b.literal(className)));\n\n    // TODO: we should really make these !important, but it'll be like\n    // Marty McFly at the Enchantment Under the Sea dance...\n    var comment = classNameAndComment.comment ? '/* ' + classNameAndComment.comment + ' */\\n  ' : '';\n\n    var explodedStyles = explodePseudoStyles(entry.staticAttributes);\n\n    css += [createCSS(explodedStyles.base, className, comment, null), createCSS(explodedStyles.hover, className, comment, ':hover'), createCSS(explodedStyles.active, className, comment, ':active'), createCSS(explodedStyles.focus, className, comment, ':focus')].join('');\n  });\n\n  return {\n    js: recast.print(ast).code,\n    css: css\n  };\n}\n\nmodule.exports = extractStyles;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/JsxstylePlugin.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar assign = require('object-assign');\nvar fs = require('fs');\n\nvar JsxstylePlugin = function () {\n  function JsxstylePlugin() {\n    _classCallCheck(this, JsxstylePlugin);\n  }\n\n  _createClass(JsxstylePlugin, [{\n    key: 'apply',\n    value: function apply(compiler) {\n      var writtenFiles = {};\n      compiler.jsxstylePluginEnabled = true;\n\n      compiler.resolvers.normal.plugin('file', function (request, callback) {\n        var generatedCss = compiler.jsxstyle && compiler.jsxstyle[request.request];\n\n        if (generatedCss && !writtenFiles[request.request]) {\n          // TODO: This is so unbelievably bad, but I believe webpack's path\n          // resolving is broken because it resolves loaders relative to the\n          // resolved path of the file, not the request.\n          fs.writeFile(request.request, generatedCss, function (err) {\n            if (err) {\n              return callback(err);\n            }\n            writtenFiles[request.request] = true;\n\n            return callback();\n          });\n        } else {\n          return callback();\n        }\n      });\n\n      compiler.plugin('done', function () {\n        for (var path in writtenFiles) {\n          fs.unlinkSync(path);\n        }\n      });\n    }\n  }]);\n\n  return JsxstylePlugin;\n}();\n\nmodule.exports = JsxstylePlugin;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/legacyAutoprefix.js":"'use strict';\n\nvar assign = require('object-assign');\n\nfunction legacyAutoprefix(style) {\n  if (style.hasOwnProperty('userSelect')) {\n    assign(style, {\n      WebkitUserSelect: style.userSelect,\n      MozUserSelect: style.userSelect,\n      msUserSelect: style.userSelect\n    });\n  }\n\n  if (style.hasOwnProperty('transition')) {\n    assign(style, {\n      WebkitTransition: style.transition,\n      MozTransition: style.transition,\n      msTransition: style.transition\n    });\n  }\n\n  if (style.hasOwnProperty('boxShadow')) {\n    assign(style, {\n      WebkitBoxShadow: style.boxShadow,\n      MozBoxShadow: style.boxShadow,\n      msBoxSelect: style.boxShadow\n    });\n  }\n\n  if (style.hasOwnProperty('fontSmoothing')) {\n    assign(style, {\n      WebkitFontSmoothing: style.fontSmoothing,\n      MozOsxFontSmoothing: style.fontSmoothing === 'antialiased' ? 'grayscale' : undefined\n    });\n  }\n\n  if (style.hasOwnProperty('flexDirection')) {\n    assign(style, {\n      WebkitFlexDirection: style.flexDirection\n    });\n  }\n\n  if (style.hasOwnProperty('flexWrap')) {\n    assign(style, {\n      WebkitFlexWrap: style.flexWrap\n    });\n  }\n\n  if (style.hasOwnProperty('alignItems')) {\n    assign(style, {\n      WebkitAlignItems: style.alignItems\n    });\n  }\n\n  if (style.hasOwnProperty('flexGrow')) {\n    assign(style, {\n      WebkitFlexGrow: style.flexGrow\n    });\n  }\n\n  if (style.hasOwnProperty('flexShrink')) {\n    assign(style, {\n      WebkitFlexShrink: style.flexShrink\n    });\n  }\n\n  if (style.hasOwnProperty('order')) {\n    assign(style, {\n      WebkitOrder: style.order\n    });\n  }\n\n  if (style.hasOwnProperty('justifyContent')) {\n    assign(style, {\n      WebkitJustifyContent: style.justifyContent\n    });\n  }\n\n  if (style.hasOwnProperty('flex')) {\n    assign(style, {\n      WebkitFlex: style.flex\n    });\n  }\n\n  if (style.display === 'flex') {\n    style.display = style.display + ';display:-webkit-flex;display:-ms-flexbox';\n  }\n\n  return style;\n}\n\nmodule.exports = legacyAutoprefix;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/renameClass.js":"'use strict';\n\nvar recast = require('recast');\nvar n = recast.types.namedTypes;\n\nfunction renameClass(renames, src) {\n  var ast = recast.parse(src);\n\n  recast.visit(ast, {\n    visitJSXOpeningElement: function visitJSXOpeningElement(path) {\n      if (path.node.name.name[0] === path.node.name.name[0].toLowerCase()) {\n        path.node.attributes.forEach(function (attribute) {\n          var name = attribute.name.name;\n          if (name === 'className' && n.Literal.check(attribute.value) && typeof attribute.value.value === 'string') {\n            attribute.value.value = attribute.value.value.split(' ').map(function (className) {\n              return renames[className] || className;\n            }).join(' ');\n          }\n        });\n      }\n      this.traverse(path);\n    }\n  });\n\n  return recast.print(ast).code;\n}\n\nmodule.exports = renameClass;","/home/travis/build/npmtest/node-npmtest-jsxstyle/node_modules/jsxstyle/lib/webpackLoader.js":"'use strict';\n\nvar extractStyles = require('./extractStyles');\nvar loaderUtils = require('loader-utils');\nvar path = require('path');\n\nvar seenBaseNames = {};\nvar classNameCounters = {};\n\nfunction webpackLoader(content) {\n  this.cacheable && this.cacheable();\n  var namespace = {};\n  var query = loaderUtils.parseQuery(this.query);\n\n  for (var key in query) {\n    // TODO: use webpack resolver\n    namespace[key] = require(query[key]);\n  }\n\n  var baseName = path.basename(this.resourcePath).slice(0, -1 * path.extname(this.resourcePath).length);\n\n  seenBaseNames[baseName] = seenBaseNames[baseName] || 0;\n  var index = seenBaseNames[baseName]++;\n\n  if (index > 0) {\n    baseName += index;\n  }\n\n  classNameCounters[baseName] = classNameCounters[baseName] || 0;\n\n  var rv = extractStyles(content, namespace, function (entry) {\n    var classNameIndex = classNameCounters[baseName]++;\n\n    return {\n      className: baseName + '_' + classNameIndex,\n      comment: this.resourcePath + ':' + entry.node.loc.start.line\n    };\n  }.bind(this));\n\n  var preamble = '';\n  if (rv.css.length > 0) {\n    // TODO: resolve loader correctly\n\n    if (!this._compiler.jsxstylePluginEnabled) {\n      preamble = 'require(' + JSON.stringify(require.resolve('style-loader/addStyles')) + ')(' + JSON.stringify([[this.resourcePath, rv.css]]) + ');';\n    } else {\n      this._compiler.jsxstyle = this._compiler.jsxstyle || {};\n      this._compiler.jsxstyle[this.resourcePath + '.css'] = rv.css;\n      preamble = 'require(' + JSON.stringify(this.resourcePath + '.css') + ');';\n    }\n  }\n  return preamble + rv.js;\n}\n\nmodule.exports = webpackLoader;"}